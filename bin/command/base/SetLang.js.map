{"version":3,"sources":["command/base/SetLang.ts"],"names":[],"mappings":";;;;;;;;AACA,wCAAqC;AACrC,4DAA6C;AAE7C,kDAA+C;AAC/C,yDAAsD;AAEtD,eAAqB,SAAQ,iBAAO;IAEnC;QAEC,KAAK,CAAC;YACL,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,CAAC,MAAM,CAAC;YACjB,IAAI,EAAE,oCAAoC;YAC1C,KAAK,EAAE,wBAAwB;YAC/B,iBAAiB,EAAE,CAAC,eAAe,CAAC;SACpC,CAAC,CAAC;IACJ,CAAC;IAIM,KAAK,CAAC,MAAM,CAAC,OAAgB,EAAE,CAAC,GAAG,EAAE,IAAI,CAA0B;QAEzE,IAAI,KAAK,GAAa,WAAI,CAAC,SAAS,CAAC;QACrC,IAAI,OAAO,IAAI,KAAK,WAAW,EAC/B;YACC,MAAM,MAAM,GAAW,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACxE,IAAI,KAAK,GAAa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,WAAI,CAAC,YAAY,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACxE,IAAI,WAAW,GAAW,MAAM,OAAO,CAAC,KAAK,CAAC,OAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC;YACvF,WAAW,GAAG,WAAI,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,WAAW,CAAC;YACpE,KAAK,GAAG,KAAK;iBACX,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;iBAChC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,WAAW,EAAE,EAAE,IAAI,WAAW,EAAE,CAAC,CAAC,CAAC;YAE5D,IAAI,MAAM,GAAW,GAAG,CAAC,gBAAgB,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAClF,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACpC;QAED,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC;YACzB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC,CAAC;QAE5D,MAAM,OAAO,GAAW,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QACxC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAE3D,GAAG,GAAG,WAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACxC,MAAM,QAAQ,GAAW,WAAI,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,OAAO,CAAC;QACvE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC1E,CAAC;CACD;AA3BA;IAFC,yBAAK,CAAC,uBAAU,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAC1C,yBAAK,CAAC,uBAAU,CAAC,QAAQ,CAAC;uCA2B1B;AAzCF,4BA0CC","file":"SetLang.js","sourcesContent":["import { Message } from '../../types/Message';\nimport { Command } from '../Command';\nimport { using } from '../CommandDecorators';\nimport { ResourceProxy } from '../../types/ResourceProxy';\nimport { Lang } from '../../localization/Lang';\nimport { Middleware } from '../middleware/Middleware';\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'setlang',\n\t\t\taliases: ['lang'],\n\t\t\tdesc: 'List languages or set bot language',\n\t\t\tusage: '<prefix>setlang [lang]',\n\t\t\tcallerPermissions: ['ADMINISTRATOR']\n\t\t});\n\t}\n\n\t@using(Middleware.resolve('lang?: Number'))\n\t@using(Middleware.localize)\n\tpublic async action(message: Message, [res, lang]: [ResourceProxy, number]): Promise<any>\n\t{\n\t\tlet langs: string[] = Lang.langNames;\n\t\tif (typeof lang === 'undefined')\n\t\t{\n\t\t\tconst prefix: string = await this.client.getPrefix(message.guild) || '';\n\t\t\tlet names: string[] = langs.map(l => Lang.getMetaValue(l, 'name') || l);\n\t\t\tlet currentLang: string = await message.guild.storage!.settings.get('lang') || 'en_us';\n\t\t\tcurrentLang = Lang.getMetaValue(currentLang, 'name') || currentLang;\n\t\t\tnames = names\n\t\t\t\t.map((l, i) => `${i + 1}:  ${l}`)\n\t\t\t\t.map(l => l.replace(` ${currentLang}`, `*${currentLang}`));\n\n\t\t\tlet output: string = res.CMD_SETLANG_LIST({ langList: names.join('\\n'), prefix });\n\t\t\treturn message.channel.send(output);\n\t\t}\n\n\t\tif (!((lang - 1) in langs))\n\t\t\treturn message.channel.send(res.CMD_SETLANG_ERR_INVALID());\n\n\t\tconst newLang: string = langs[lang - 1];\n\t\tawait message.guild.storage!.settings.set('lang', newLang);\n\n\t\tres = Lang.createResourceProxy(newLang);\n\t\tconst langName: string = Lang.getMetaValue(newLang, 'name') || newLang;\n\t\treturn message.channel.send(res.CMD_SETLANG_SUCCESS({ lang: langName }));\n\t}\n}\n"],"sourceRoot":"../../../src"}