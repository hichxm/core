{"version":3,"sources":["command/base/usagecontrol/Limit.ts"],"names":[],"mappings":"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","file":"Limit.js","sourcesContent":["import { Role, Collection } from 'discord.js';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\nimport { ResourceProxy } from '../../../types/ResourceProxy';\nimport { Middleware } from '../../middleware/Middleware';\nimport { GuildStorage } from '../../../storage/GuildStorage';\nimport { Resolver } from '../../resolvers/Resolver';\nimport { using } from '../../CommandDecorators';\nconst { expect, resolve, localize } = Middleware;\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'limit',\n\t\t\tdesc: 'Limit commands to certain roles',\n\t\t\tusage: `<prefix>limit <command> <roles, ...> | <prefix>limit <'clear'> <command>`,\n\t\t\tinfo: `Multiple roles can be passed to the command as a comma-separated list.\n\nIf a role is unable to be found and you know it exists, it could be that there are multiple roles containing the given role name search text. Consider refining your search, or using an @mention for the role you want to use.\n\nLimiting a command will add the given roles to set of roles the command is limited to.\n\nUse '<prefix>limit clear <command>' to clear all of the roles a command is limited to.\n\nRemoving individual roles is not possible to keep the command simple to use.`,\n\t\t\tcallerPermissions: ['ADMINISTRATOR']\n\t\t});\n\t}\n\n\t@using(function(this: Command, message, args)\n\t{\n\t\tif (args[0] === 'clear')\n\t\t\treturn resolve(`clear: String, command: Command`)\n\t\t\t\t.call(this, message, args);\n\t\telse\n\t\t\treturn resolve(`command: Command, ...roles: String`)\n\t\t\t\t.call(this, message, args);\n\t})\n\t@using(function(this: Command, message, args)\n\t{\n\t\tif (args[0] === 'clear')\n\t\t\treturn expect(`clear: String, command: Command`)\n\t\t\t\t.call(this, message, args);\n\t\telse\n\t\t\treturn expect(`command: Command, ...roles: String`)\n\t\t\t\t.call(this, message, args);\n\t})\n\t@using(localize)\n\tpublic async action(message: Message, [res, clearOrCommand, rolesOrCommand]: [ResourceProxy, Command | string, Command | string]): Promise<any>\n\t{\n\t\tif (clearOrCommand === 'clear') return this.clearLimit(message, res, rolesOrCommand as Command);\n\t\telse return this.limitCommand(message, res, clearOrCommand as Command, rolesOrCommand as string);\n\t}\n\n\t/**\n\t * Clear all roles limiting the given command\n\t */\n\tpublic async clearLimit(message: Message, res: ResourceProxy, command: Command): Promise<any>\n\t{\n\t\tawait message.guild.storage!.settings.remove(`limitedCommands.${command.name}`);\n\t\treturn this.respond(message,\n\t\t\tres.CMD_LIMIT_CLEAR_SUCCESS({ commandName: command.name }));\n\t}\n\n\t/**\n\t * Add the given roles to the limiter for the given command\n\t */\n\tpublic async limitCommand(message: Message, res: ResourceProxy, command: Command, roles: string): Promise<any>\n\t{\n\t\tif (command.group === 'base') return this.respond(message, res.CMD_LIMIT_ERR_INVALID_GROUP());\n\n\t\tconst roleResolver: Resolver = this.client.resolvers.get('Role');\n\t\tconst roleStrings: string[] = roles.split(/ *, */).filter(r => r !== '' && r !== ',');\n\n\t\tconst foundRoles: Role[] = [];\n\t\tconst invalidRoles: string[] = [];\n\n\t\tfor (const roleString of roleStrings)\n\t\t{\n\t\t\tconst role: Role | Collection<string, Role> = await roleResolver.resolveRaw(roleString, message);\n\t\t\tif (!role || role instanceof Collection) invalidRoles.push(roleString);\n\t\t\telse foundRoles.push(role);\n\t\t}\n\n\t\tif (invalidRoles.length > 0) message.channel\n\t\t\t.send(res.CMD_LIMIT_ERR_INVALID_ROLE({ invalidRoles: invalidRoles.map(r => `\\`${r}\\``).join(', ') }));\n\n\t\tif (foundRoles.length === 0) return this.respond(message, res.CMD_LIMIT_ERR_NO_ROLES());\n\n\t\tconst storage: GuildStorage = message.guild.storage!;\n\t\tconst newLimit: Set<string> =\n\t\t\tnew Set(await storage.settings.get(`limitedCommands.${command.name}`) || []);\n\n\t\tfor (const role of foundRoles) newLimit.add(role.id);\n\t\tawait storage.settings.set(`limitedCommands.${command.name}`, Array.from(newLimit));\n\n\t\treturn this.respond(message, res.CMD_LIMIT_SUCCESS({\n\t\t\troles: foundRoles.map(r => `\\`${r.name}\\``).join(', '),\n\t\t\tcommandName: command.name\n\t\t}));\n\t}\n}\n"],"sourceRoot":"../../../../src"}