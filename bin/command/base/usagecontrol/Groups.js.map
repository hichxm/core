{"version":3,"sources":["command/base/usagecontrol/Groups.ts"],"names":[],"mappings":"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","file":"Groups.js","sourcesContent":["import { Message } from '../../../types/Message';\nimport { Command } from '../../Command';\nimport { using } from '../../CommandDecorators';\nimport { ResourceProxy } from '../../../types/ResourceProxy';\nimport { Middleware } from '../../middleware/Middleware';\nimport { Lang } from '../../../localization/Lang';\nconst { resolve, expect, localize } = Middleware;\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'groups',\n\t\t\tdesc: 'Configure or list command groups',\n\t\t\tusage: `<prefix>groups ['enable'|'on'|'disable'|'off'] [...group]`,\n\t\t\tinfo: `A '*' denotes a disabled group when listing all command groups.`,\n\t\t\tcallerPermissions: ['ADMINISTRATOR']\n\t\t});\n\t}\n\n\t@using(resolve(`action: ['enable', 'on', 'disable', 'off'], ...group: String`))\n\t@using(function(this: Command, message, args: string[])\n\t{\n\t\tif (args[0])\n\t\t\treturn expect(`action: ['enable', 'on', 'disable', 'off'], ...group: String`)\n\t\t\t\t.call(this, message, args);\n\t\telse return [message, args];\n\t})\n\t@using(localize)\n\tpublic async action(message: Message, [res, action, group]: [ResourceProxy, string, string]): Promise<any>\n\t{\n\t\tif (!action) return this.listGroups(message, res);\n\t\telse if (['enable', 'on'].includes(action)) return this.enableGroup(message, res, group);\n\t\telse if (['disable', 'off'].includes(action)) return this.disableGroup(message, res, group);\n\t}\n\n\t/**\n\t * List command groups\n\t */\n\tprivate async listGroups(message: Message, res: ResourceProxy): Promise<void>\n\t{\n\t\tconst lang: string = await message.guild.storage!.settings.get('lang') || this.client.defaultLang;\n\t\tconst info: string[] = this.client.commands.groups.map(g => Lang.getGroupInfo(g, lang));\n\t\tconst disabledGroups: string[] = await message.guild.storage!.settings.get('disabledGroups') || [];\n\n\t\tconst output: string = res.CMD_GROUPS_LIST({\n\t\t\tgroups: this.client.commands.groups,\n\t\t\tdisabledGroups,\n\t\t\tinfo\n\t\t});\n\n\t\tthis.respond(message, output);\n\t}\n\n\t/**\n\t * Enable a command group\n\t */\n\tprivate async enableGroup(message: Message, res: ResourceProxy, group: string): Promise<any>\n\t{\n\t\tconst err: { [error: string]: string } = {\n\t\t\tNO_EXIST: res.CMD_GROUPS_ERR_NOEXIST({ group }),\n\t\t\tENABLED: res.CMD_GROUPS_ERR_ENABLED({ group })\n\t\t};\n\n\t\tif (!this.client.commands.groups.includes(group)) return this.respond(message, err.NO_EXIST);\n\t\tconst disabledGroups: string[] = await message.guild.storage!.settings.get('disabledGroups') || [];\n\t\tif (group === 'base' || !disabledGroups.includes(group))\n\t\t\treturn this.respond(message, err.ENABLED);\n\n\t\tdisabledGroups.splice(disabledGroups.indexOf(group), 1);\n\t\tawait message.guild.storage!.settings.set('disabledGroups', disabledGroups);\n\n\t\tthis.respond(message, res.CMD_GROUPS_ENABLE_SUCCESS({ group }));\n\t}\n\n\t/**\n\t * Disable a command group\n\t */\n\tprivate async disableGroup(message: Message, res: ResourceProxy, group: string): Promise<any>\n\t{\n\t\tconst err: { [error: string]: string } = {\n\t\t\tNO_EXIST: res.CMD_GROUPS_ERR_NOEXIST({ group }),\n\t\t\tDISABLED: res.CMD_GROUPS_ERR_DISABLED({ group })\n\t\t};\n\n\t\tif (!this.client.commands.groups.includes(group)) return this.respond(message, err.NO_EXIST);\n\t\tconst disabledGroups: string[] = await message.guild.storage!.settings.get('disabledGroups') || [];\n\t\tif (group === 'base' || disabledGroups.includes(group))\n\t\t\treturn this.respond(message, err.DISABLED);\n\n\t\tdisabledGroups.push(group);\n\t\tawait message.guild.storage!.settings.set('disabledGroups', disabledGroups);\n\n\t\tthis.respond(message, res.CMD_GROUPS_DISABLE_SUCCESS({ group }));\n\t}\n}\n"],"sourceRoot":"../../../../src"}