{"version":3,"sources":["storage/SequelizeProvider.ts"],"names":[],"mappings":"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","file":"SequelizeProvider.js","sourcesContent":["import { StorageProviderConstructor } from '../types/StorageProviderConstructor';\nimport { IStorageProvider } from './interface/IStorageProvider';\nimport { StorageProvider } from './StorageProvider';\nimport { Database } from './Database';\nimport * as Sequelize from 'sequelize';\n\n/**\n * Represents an entry in a `SequelizeProvider` db table\n * following the Model the provider uses\n */\ntype Entry = { key: string, value: string };\n\n/**\n * Represents a Model entry returned from `<Sequelize>.findByPrimary()`.\n * Guaranteed to return a string in this representation because a\n * `StorageProvider` is guaranteed to only store, and thus retrieve, strings\n */\ntype ReturnedModel = { get(key: string): string };\n\nexport enum Dialect { Postgres, SQLite, MSSQL, MySQL }\n\nexport function SequelizeProvider(url: string, dialect: Dialect, debug: boolean): StorageProviderConstructor\n{\n\treturn class extends StorageProvider implements IStorageProvider\n\t{\n\t\tprivate readonly _backend: Database;\n\t\tprivate readonly _model: Sequelize.Model<object, object>;\n\n\t\tpublic constructor(name: string)\n\t\t{\n\t\t\tsuper();\n\n\t\t\t// Lazy load sequelize\n\t\t\tconst seq: typeof Sequelize = require('sequelize');\n\n\t\t\tthis._backend = Database.instance(url, debug);\n\t\t\tthis._model = this._backend.db.define(name, {\n\t\t\t\t\tkey: { type: seq.STRING, allowNull: false, primaryKey: true },\n\t\t\t\t\tvalue: [Dialect.Postgres, Dialect.SQLite, Dialect.MSSQL].includes(dialect)\n\t\t\t\t\t\t? seq.TEXT\n\t\t\t\t\t\t: seq.TEXT('long')\n\t\t\t\t},\n\t\t\t\t{ timestamps: false, freezeTableName: true }\n\t\t\t);\n\t\t}\n\n\t\tpublic async init(): Promise<void>\n\t\t{\n\t\t\tawait this._backend.init();\n\t\t\tawait this._backend.db.sync();\n\t\t}\n\n\t\tpublic async keys(): Promise<string[]>\n\t\t{\n\t\t\treturn (await this._model.findAll() as Entry[]).map(r => r.key);\n\t\t}\n\n\t\tpublic async get(key: string): Promise<string | undefined>\n\t\t{\n\t\t\tif (typeof key === 'undefined') throw new TypeError('Key must be provided');\n\t\t\tif (typeof key !== 'string') throw new TypeError('Key must be a string');\n\n\t\t\tconst entry: ReturnedModel = await this._model.findByPrimary(key) as ReturnedModel;\n\t\t\tif (entry === null) return;\n\n\t\t\treturn entry.get('value');\n\t\t}\n\n\t\tpublic async set(key: string, value: string): Promise<void>\n\t\t{\n\t\t\tif (typeof key === 'undefined') throw new TypeError('Key must be provided');\n\t\t\tif (typeof key !== 'string') throw new TypeError('Key must be a string');\n\t\t\tif (typeof value === 'undefined') throw new TypeError('Value must be provided');\n\t\t\tif (typeof value !== 'string') throw new TypeError('Value must be a string');\n\n\t\t\tawait this._model.upsert({ key, value });\n\t\t}\n\n\t\tpublic async remove(key: string): Promise<void>\n\t\t{\n\t\t\tif (typeof key === 'undefined') throw new TypeError('Key must be provided');\n\t\t\tif (typeof key !== 'string') throw new TypeError('Key must be a string');\n\t\t\tawait this._model.destroy({ where: { key } });\n\t\t}\n\n\t\tpublic async clear(): Promise<void>\n\t\t{\n\t\t\tawait this._model.destroy({ where: {} });\n\t\t}\n\t};\n}\n"],"sourceRoot":"../../src"}